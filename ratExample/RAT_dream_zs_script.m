% RAT_DREAM_ZS_SCRIPT   Generate MEX-function RAT_dream_zs_mex from
%  RAT_dream_zs.
% 
% Script generated from project 'RAT_dream_zs.prj' on 25-Jan-2023.
% 
% See also CODER, CODER.CONFIG, CODER.TYPEOF, CODEGEN.

%% Create configuration object of class 'coder.MexCodeConfig'.
cfg = coder.config('mex');
cfg.GenerateReport = true;
cfg.EnableJIT = true;
cfg.EnableJITSilentBailOut = true;

%% Define argument types for entry-point 'RAT_dream_zs'.
ARGS = cell(1,1);
ARGS{1} = cell(4,1);
ARGS_1_1 = struct;
ARGS_1_1.seq = coder.typeof(0);
ARGS_1_1.DEpairs = coder.typeof(0);
ARGS_1_1.nCR = coder.typeof(0);
ARGS_1_1.k = coder.typeof(0);
ARGS_1_1.parallelUpdate = coder.typeof(0);
ARGS_1_1.eps = coder.typeof(0);
ARGS_1_1.steps = coder.typeof(0);
ARGS_1_1.m0 = coder.typeof(0);
ARGS_1_1.pJumpRate_one = coder.typeof(0);
ARGS_1_1.pCR = coder.typeof('X',[1 3]);
ARGS_1_1.Restart = coder.typeof('X',[1 2]);
ARGS_1_1.modout = coder.typeof('X',[1 2]);
ARGS_1_1.save = coder.typeof('X',[1 3]);
ARGS_1_1.ABC = coder.typeof('X',[1 2]);
ARGS_1_1.m = coder.typeof(0);
ARGS_1_1.CR = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.n = coder.typeof(0);
ARGS_1_1.ndraw = coder.typeof(0);
ARGS_1_1.T = coder.typeof(0);
ARGS_1_1.prior = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_1.BoundHandling = coder.typeof('X',[1 7]);
ARGS_1_1.lik = coder.typeof(0);
ARGS_1_1.Best = coder.typeof(0);
ARGS{1}{1} = coder.typeof(ARGS_1_1);
ARGS_1_2 = struct;
ARGS_1_2_problemDef = struct;
ARGS_1_2_problemDef.contrastBacks = coder.typeof(0);
ARGS_1_2_problemDef.contrastBacksType = coder.typeof(0);
ARGS_1_2_problemDef.TF = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef.resample = coder.typeof(0);
ARGS_1_2_problemDef.dataPresent = coder.typeof(0);
ARGS_1_2_problemDef.numberOfContrasts = coder.typeof(0);
ARGS_1_2_problemDef.geometry = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef.contrastShifts = coder.typeof(0);
ARGS_1_2_problemDef.contrastScales = coder.typeof(0);
ARGS_1_2_problemDef.contrastNbas = coder.typeof(0);
ARGS_1_2_problemDef.contrastNbss = coder.typeof(0);
ARGS_1_2_problemDef.contrastRes = coder.typeof(0);
ARGS_1_2_problemDef.backs = coder.typeof(0);
ARGS_1_2_problemDef.shifts = coder.typeof(0);
ARGS_1_2_problemDef.sf = coder.typeof(0);
ARGS_1_2_problemDef.nba = coder.typeof(0);
ARGS_1_2_problemDef.nbs = coder.typeof(0);
ARGS_1_2_problemDef.res = coder.typeof(0);
ARGS_1_2_problemDef.params = coder.typeof(0);
ARGS_1_2_problemDef.numberOfLayers = coder.typeof(0);
ARGS_1_2_problemDef.modelType = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef.contrastCustomFiles = coder.typeof(0);
ARGS_1_2_problemDef.fitpars = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_2_problemDef.otherpars = coder.typeof(0,[Inf  1],[1 0]);
ARGS_1_2_problemDef.fitconstr = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_2_problemDef.otherconstr = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_2.problemDef = coder.typeof(ARGS_1_2_problemDef);
ARGS_1_2_problemDef_cells = cell([1 14]);
ARG_1 = coder.typeof(0,[1 2]);
ARGS_1_2_problemDef_cells{1} = coder.typeof({ARG_1}, [1 Inf],[0 1]);
ARG_2 = coder.typeof(0,[Inf  5],[1 1]);
ARGS_1_2_problemDef_cells{2} = coder.typeof({ARG_2}, [1 Inf],[0 1]);
ARG_3 = coder.typeof(0,[1 2]);
ARGS_1_2_problemDef_cells{3} = coder.typeof({ARG_3}, [1 Inf],[0 1]);
ARG_4 = coder.typeof(0,[1 2]);
ARGS_1_2_problemDef_cells{4} = coder.typeof({ARG_4}, [1 Inf],[0 1]);
ARG_5 = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_2_problemDef_cells{5} = coder.typeof({ARG_5}, [1 Inf],[0 1]);
ARG_6 = coder.typeof(0,[1 5]);
ARGS_1_2_problemDef_cells{6} = coder.typeof({ARG_6}, [Inf  1],[1 0]);
ARG_7 = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef_cells{7} = coder.typeof({ARG_7}, [1 Inf],[0 1]);
ARG_8 = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef_cells{8} = coder.typeof({ARG_8}, [1 Inf],[0 1]);
ARG_9 = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef_cells{9} = coder.typeof({ARG_9}, [1 Inf],[0 1]);
ARG_10 = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef_cells{10} = coder.typeof({ARG_10}, [1 Inf],[0 1]);
ARG_11 = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef_cells{11} = coder.typeof({ARG_11}, [1 Inf],[0 1]);
ARG_12 = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef_cells{12} = coder.typeof({ARG_12}, [1 Inf],[0 1]);
ARG_13 = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2_problemDef_cells{13} = coder.typeof({ARG_13}, [1 Inf],[0 1]);
ARG_15 = coder.typeof('X',[1 Inf],[1 1]);
ARG_14 = coder.typeof({ARG_15}, [1 3],[0 1]);
ARGS_1_2_problemDef_cells{14} = coder.typeof({ARG_14}, [1 Inf],[0 1]);
ARGS_1_2.problemDef_cells = coder.typeof(ARGS_1_2_problemDef_cells,[1 14]);
ARGS_1_2.problemDef_cells = ARGS_1_2.problemDef_cells.makeHeterogeneous();
ARGS_1_2_problemDef_limits = struct;
ARGS_1_2_problemDef_limits.params = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_2_problemDef_limits.backs = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_2_problemDef_limits.scales = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_2_problemDef_limits.shifts = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_2_problemDef_limits.nba = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_2_problemDef_limits.nbs = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_2_problemDef_limits.res = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_2.problemDef_limits = coder.typeof(ARGS_1_2_problemDef_limits);
ARGS_1_2_controls = struct;
ARGS_1_2_controls.para = coder.typeof('X',[1 6]);
ARGS_1_2_controls.proc = coder.typeof('X',[1 9]);
ARGS_1_2_controls.display = coder.typeof('X',[1 4]);
ARGS_1_2_controls.tolX = coder.typeof(0);
ARGS_1_2_controls.tolFun = coder.typeof(0);
ARGS_1_2_controls.maxFunEvals = coder.typeof(0);
ARGS_1_2_controls.maxIter = coder.typeof(0);
ARGS_1_2_controls.populationSize = coder.typeof(0);
ARGS_1_2_controls.F_weight = coder.typeof(0);
ARGS_1_2_controls.F_CR = coder.typeof(0);
ARGS_1_2_controls.VTR = coder.typeof(0);
ARGS_1_2_controls.numGen = coder.typeof(0);
ARGS_1_2_controls.strategy = coder.typeof(0);
ARGS_1_2_controls.Nlive = coder.typeof(0);
ARGS_1_2_controls.nmcmc = coder.typeof(0);
ARGS_1_2_controls.propScale = coder.typeof(0);
ARGS_1_2_controls.nsTolerance = coder.typeof(0);
ARGS_1_2_controls.calcSld = coder.typeof(0);
ARGS_1_2_controls.repeats = coder.typeof(0);
ARGS_1_2_controls.nsimu = coder.typeof(0);
ARGS_1_2_controls.burnin = coder.typeof(0);
ARGS_1_2_controls.resamPars = coder.typeof(0,[1 2]);
ARGS_1_2_controls.updateFreq = coder.typeof(0);
ARGS_1_2_controls.updatePlotFreq = coder.typeof(0);
ARGS_1_2_controls_checks = struct;
ARGS_1_2_controls_checks.params_fitYesNo = coder.typeof(0);
ARGS_1_2_controls_checks.backs_fitYesNo = coder.typeof(0);
ARGS_1_2_controls_checks.shifts_fitYesNo = coder.typeof(0);
ARGS_1_2_controls_checks.scales_fitYesNo = coder.typeof(0);
ARGS_1_2_controls_checks.nbairs_fitYesNo = coder.typeof(0);
ARGS_1_2_controls_checks.nbsubs_fitYesNo = coder.typeof(0);
ARGS_1_2_controls_checks.resol_fitYesNo = coder.typeof(0);
ARGS_1_2_controls.checks = coder.typeof(ARGS_1_2_controls_checks);
ARGS_1_2.controls = coder.typeof(ARGS_1_2_controls);
ARGS{1}{2} = coder.typeof(ARGS_1_2);
ARGS_1_3 = struct;
ARGS_1_3.minn = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_3.maxn = coder.typeof(0,[1 Inf],[0 1]);
ARGS{1}{3} = coder.typeof(ARGS_1_3);
ARGS_1_4 = struct;
ARGS_1_4.MeasData = coder.typeof(0,[Inf Inf],[1 1]);
ARGS_1_4.N = coder.typeof(0);
ARGS{1}{4} = coder.typeof(ARGS_1_4);

%% Invoke MATLAB Coder.
codegen -config cfg RAT_dream_zs -args ARGS{1}

